{"name":"Mewmew","tagline":"/ᐠ｡ꞈ｡ᐟ\\ MewMew Programming Language - Program in Cats' Language","body":"# /ᐠ｡ꞈ｡ᐟ\\ MewMew Programming Language\r\n### Program in Cats' Language\r\n\r\nMewMew 🐱 is an Esoteric `Just for Fun` programming language. You can use MewMew to program in cats' language.\r\n\r\n## 🎉 Get Started\r\n#### 😸 Integers\r\nThere's no concept of numbers (eg. 1 2 3 4 100) in MewMew, instead we use `mew`s. 1 `mew` is equal to 1 , therefor `mewmew` = 2 , `mewmewmew` = 3 , `mewmewmewmewmewmewmewmewmewmew` = 10. (You got the Idea right)\r\n\r\n#### 😸 Operators\r\n**MewMew supports a few types of operators =>**\r\n- `+` -> Addition\r\n* `-` -> Subtraction\r\n* `*` -> Multiplication\r\n* `/` -> Division\r\n* `**` -> Power\r\n* `~` -> Absolute Value\r\n* `-` -> Unary Minus\r\n* `>` -> Greater than\r\n* `>=` -> Greater than equal to\r\n* `<` -> Less than\r\n* `<=` -> Less than equal to\r\n* `==` -> Is Equal to\r\n* `!=` -> Not Equal to\r\n* `&` -> And\r\n* `|` -> Or\r\n* `%` -> Modulus (Remainder)\r\n\r\n#### 😸 Identifiers\r\nMewMew identifiers must start with an `m` and can contain zero or more consecutive `_` and `w`. `e` cannot be used , because the interpreter can confuse it with a mew number.\r\n\r\n#### 😸 Assignment\r\n`ID = Expression`\r\n\r\nIDs will follow the rules of identifiers (above mentioned)\r\n\r\n#### 😸 Print aka. *Meow Say*\r\nThere's no keyword , to print we use the `::` symbol, for example\r\n`::mewmew + mewmew` outputs `4`\r\n\r\n#### 😸 If\r\n`CONDITION ? TRUTH_BODY ;`\r\n\r\nIf statement of mewmew is very similar to ternary expression of C/C++.\r\n\r\n\r\n#### 😸 If Else\r\n`CONDITION ? TRUTH_BODY : ELSE_BODY ;`\r\n\r\n#### 😸 Repeat Loop aka. *Meow Loop*\r\n`@TIMES : BODY ;`\r\n\r\nWhere `TIMES` can be any mew number , and the `BODY` will be executed `TIMES` times.\r\n\r\n#### 😸 Scratch Functions\r\n`#MEWNUMBER` (The '#' can be 1 to 5 consecutive times )\r\n*   1 `#` calculates square root of the expression\r\n*   2 `#` returns 2 times the given expression\r\n*   3 `#` returns 5 times the given expression\r\n*   4 `#` returns 10 times the given expression\r\n*   5 `#` returns 100 times the given expression\r\n\r\n#### 😸 Comments\r\n`//`\r\n\r\nTo write a comment , start the sentence with `//`\r\n\r\n## 🎁 Example Programs:\r\n(Two Examples are provided in the repo)\r\n\r\n```\r\n//Addition\r\n\r\nm = mewmew + mewmewmew;\r\n::m;\r\n\r\nOUTPUT: 5\r\n```\r\n\r\n```\r\n// Print All Numbers Divisible by 2 under 100\r\nm = mew;\r\n@#####(mew):\r\n    m % mewmew == mew - mew ? ::m;;\r\n    m = m+mew;\r\n\r\n;\r\n```\r\n\r\n\r\n\r\n## 📑 NOTEs:\r\n*  MewMew is an esoteric language , it was never intended to be used for mainstream programming.\r\n*  MewMew is only tested on Linux device (Ubuntu 18.04 x86_64). Building on Windows or MacOS should not be difficult , Please let me know , if you build it on either Windows or MacOs.\r\n\r\n## 🔨 Building Yourself\r\n#### 🔩 Required\r\n- ANTLR4 JAR\r\n- ANTLR4 (C++) RUNTIME\r\n- GCC/G++\r\n- CMake\r\n\r\n#### 🔧 How to Build\r\n- Download & Setup ANTLR4 JAR (JAVA Runtime is Required to run ANTLR4)\r\n- Download ANTLR4 C++ Runtime , compile and setup\r\n- Fork , Clone this Repository\r\n- `mkdir build && cd build`\r\n- `cmake ..`\r\n- If Things are good. You'll have a executable binary file called **mewmew**\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}